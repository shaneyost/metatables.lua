==============================================================================
------------------------------------------------------------------------------
Before I can describe, in my own words, what a metatable is I should first
understand the core significance of a Table in Lua. Only then can I move
confidently into the subject of metatables.

------------------------------------------------------------------------------
A table in Lua is the only built-in complex data structure. It serves as
arrays, dictionaries, objects and even class-like structures. Unlike many
other languages that have distinct types, previously mentioned, Lua unifies
them under a single construct (a table).

Usage ~
>lua
    -- array like
    MtExample.mytable01 = { "1", "hi", "2" }
    print(MtExample.mytable01[1])
    print(MtExample.mytable01[2])
    print(MtExample.mytable01[3])
    -- dictionary like
    MtExample.mytable02 = { y={color1="green", color2="red"}, x="foo" }
    print(MtExample.mytable02["y"].color1)
    print(MtExample.mytable02.y.color2)
    print(MtExample.mytable02.x)
<
------------------------------------------------------------------------------
                                                                     *sometable*
                                  `sometable`
Tables allow Lua to be expressive but lightweight. They can grow and shrink
as needed. When assigning a table to a variable I'm assigning a reference
"not a copy"

Usage ~
>lua
    local a = { x = 10 }
    local b = a
    b.x = 20
    print(a.x) -- 20 (b and a are references to same table)
<

After awhile I realized modules, environments (e.g. _G), metatables and so
much more are just tables. So, in a few more words, 'why' was this design
choosen?

Lua was designed to be simple, efficient and embeddable. Instead of having
multiple data structures, a single, well-designed construct (the table)
handles everything. This makes ...

- The language simpler (fewer constructs)
- The runtime faster (optimized for a single data structure)
- Memory usage more efficient (no need for separate containers per type)

Tables are the heart of Lua providing the building blocks needed for
advanced behavior while still remaining flexible, lightweight and powerful.

A 'very simple' example for me to think about before diving into the
subject of metatables.
>lua
  sometable = { "1", "2", "4" }
  utils.PT(getmetatable(sometable) or { "no metatable found" })
  setmetatable(sometable, {
      __index = function(table, key)
          print("Access on missing key '" .. key .. "'")
          return nil
      end,
  })
  utils.PT(getmetatable(sometable) or { "no metatable found" })

  for i = 1, 5 do
      print(sometable[i])
  end
<

==============================================================================
------------------------------------------------------------------------------
Now that I can define a table lets try defining a metatable in my own words
to question my understanding.

> If I want to change the behavior of a table, I must define a set of rules
that govern how it behaves in specific situations. By default, tables do
not have predefined behaviors for operations like addition or concat. The
construct that allows us to define these rules is called a metatable, and
the rules themselves are called metamethods.

I think this is a good first start. However, like everything else, it's
helpful to understand the why first before diving into the how. So lets
answer the question "Why did Lua's creators choose metatables?".

** Reason (1) **
Unlike classes, Lua does not enforce inheritance or class hierarchies.
Instead metatables allow developers to define behavior only when needed and
they can choose different styles of object models ...

- Prototype-based
- Class-like if desired
- Ad-hoc behaviors without strict structure

An example of a prototype-based appoach where we

- Didn't define a strict "class"
- Chose to use prototype-based inheritance (e.g. `__index`)

@usage >lua
    Dog = { sound = "Woof!" }
    function Dog:new()
        local obj = {}
        setmetatable(obj, { __index = self })
        return obj
    end
    function Dog:speak()
        print(self.sound)
    end
    mydog = Dog:new()
    mydog:speak()
<
** Reason (2) **
Lua is designed to be lighweight(small runtime, low memory usage), fast (
simple VM, no extra OOP overhead), easy to embed (games, embedded, etc).
Adding a full-fledged class system would negate that.

Lua optimizes performance by keeping tables and metatables as the core
abstraction thus objects are just tables, metatables can handle special
behaviors, and method lookup is opitimized (e.g. via `__index`).

** Reason (3) **
Lua's philosophy is data-first where tables act as the universal data
structure, and metatables extend their behavior dynamically. This differs
from class-based languages where data 'and' behavior are enforced together.

So in Lua we can say tables may be pure data or objects with behavior.
Metatables allow dynamic rule creation instead of predefining everything.
An example to illustrate pure data vs behavior-driven objects ...
>lua
  -- Data-Only Table!
  local spaceship = { name = "Falcon", speed = 500 }
  -- Behavior-Enhanced Table (using metatables)
  setmetatable(spaceship, {
      __index = function(tbl, key)
          if key == "boost" then
              return function()
                  tbl.speed = tbl.speed + 100
              end
          end
      end,
  })
  spaceship.boost()
  print(spaceship.speed)
<
------------------------------------------------------------------------------
A quick table on why Lua uses Metatables instead of classes

| Aspect      | Metatables              | Class-Based OOP     |
| ----------- | ----------------------- | ------------------- |
| Flexibility | Any object model        | Strict inheritance  |
| Performance | Lightweight             | More memory         |
| Data-Driven | data + dynamic behavior | predefined behavior |


==============================================================================
------------------------------------------------------------------------------
                                                                           *Dog*
                                     `Dog`
This is a good example to understand the lookup process that Lua carries
out when a key is not found in a table.

Step (1)
We define a table that has no metatable and only one key/value pair. We can
confirm this right now by printing it so lets do that.

Step (2)
We create a function using colon notation. Lua automatically stores
the function in Dog when using this notation. In addition, colon notation
will pass self (e.g. Dog.new(Dog))

The function creates an empty table and assigns a metatable to it with the
metamethod __index. Notice we assign the value self to it. Because 'self'
is Dog in this case any accesses on obj where key does not exist will go to
Dog to lookup the key.

Step (3)
Same thing happens here. We create another function using colon notation
and Lua, again, automatically stores the function in Dog. 'self' is also
passed to speak().

Step (4)
An empty table is returned to mydog. It has absolutely nothing in it other
that being assigned a metatable w/ one behavior being __index = self

Step (5)
mydog does not have a speak() function in it but it does have a metatable.
When an access occurs on a key that does not exist Lua goes to the
metatable and looks for the metamethod __index. __index is assigned the
value of 'self'. I know, from earlier, that 'self' is Dog so Lua goes to
Dog and finds the function speak.

Ok, almost done. Now mydog.speak redirects to Dog.speak(mydog). Very
important that I understand even though speak is stored in Dog, the self
argument is actually mydog (since I'm using colon syntax here and mydog is
calling speak())

Now what happens in speak? Remember what I just said, that self is actually
mydog not Dog (e.g. Dog.speak(mydog)). The self inside the function is
whatever object called the function. Inside speak we now run self.sound but
wait ... mydog.sound does not exist. So what happens. The same steps occur
earlier where Lua goes to the metatable metamethod __index for missing keys
and gets redirected to Dog. It finds that Dog has a sound and so "Woof!"
says the dog. :)
>lua
  local Dog = { sound = "Woof!" }
  utils.PT(Dog)
  print(getmetatable(Dog) or "has no metatable")
  function Dog:new()
      local obj = {}
      setmetatable(obj, { __index = self })
      return obj
  end
  utils.PT(Dog)
  function Dog:speak()
      print(self.sound)
  end
  utils.PT(Dog)
  local mydog = Dog:new()
  mydog:speak()
<

 vim:tw=78:ts=8:noet:ft=help:norl: